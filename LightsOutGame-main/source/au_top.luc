module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output led_strip[4],
    input button[16],
    input reset_button[1], // need to configure this in alchitry.acf
    input difficulty_button[1] // // need to configure this in alchitry.acf
    
    //output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    //input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  // initial_board_states gen(.clk(clk), .rst(rst));
  initial_board_states initial_states(.clk(clk), .rst(rst));  
  led_out led_out (.clk(clk), .rst(rst));
  //display_encoder display_encoder(.clk(clk), .rst(rst))
  difficulty_level_controller diff_control(.clk(clk), .rst(rst));
  
  dff board_state[16](#INIT(b0011011111111111), .clk(clk), .rst(rst));
  alu alu_machine;
  edge_detector button_detector[16](#RISE(1), #FALL(0), .clk(clk)); //detect on rising edge only 
  button_conditioner button_cond[16](.clk(clk));

  edge_detector reset_button_detector[1](#RISE(1), #FALL(0), .clk(clk)); //detect on rising edge only 
  button_conditioner reset_button_cond[1](.clk(clk));

  edge_detector difficulty_button_detector[1](#RISE(1), #FALL(0), .clk(clk)); //detect on rising edge only 
  button_conditioner difficulty_button_cond[1](.clk(clk));
  
  fsm game_state(.clk(clk), .rst(rst)) = {IN_GAME, GAME_OVER};
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
        
        //board_manager board_mgr(#ROW(ROW), #COL(COL)); replaced by initial state
        // board_checker chkr(#ROW(ROW), #COL(COL)); to reinstantiate when checker logic is out
      
    }
  }

  
  
  always {

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    //led_strip = 8h00;             // turn LEDs off
    //io_led = 3x{{8h00}};        // turn LEDs off    
    
    // io_seg = 8hff;          // turn segments off
    // io_sel = 4hf;           // select no digits
    
    // button_cond.in = io_button[1];
    button_cond.in = button[15:0];
    button_detector.in = button_cond.out;

    // make sure reset button only detects rising edges
    reset_button_cond.in = reset_button[0];
    reset_button_detector.in = reset_button_cond.out;

    // make sure reset button only detects rising edges
    difficulty_button_cond.in = difficulty_button[0];
    difficulty_button_detector.in = difficulty_button_cond.out;

    //initialize display
    initial_states.update_state = 0;
    //initial_states.toggle = button_cond.out;
       
    case (game_state.q) {
      game_state.IN_GAME:
        //io_led[2][7] = 0; // For debugging game_state

        if(button_detector.out)
        {
          //alu_machine.button_pressed[15:0] = button_detector.out;
          //alu_machine.button_pressed[15:8] = io_dip[1][7:0];
          diff_control.update_move = 1; // update number of hidden turns left for display
          alu_machine.button_pressed = button_detector.out;
          alu_machine.state = board_state.q;
          board_state.d = alu_machine.out;
          if(alu_machine.game_over)
          {
            game_state.d = game_state.GAME_OVER;
          }
        }
        else
        {
          alu_machine.button_pressed = 16b0;
          alu_machine.state = board_state.q;
          diff_control.update_difficulty = 0;
          diff_control.update_move
        }

        // if reset button pressed, get new initial board state and update board_state with this.
        if (reset_button_detector.out)
        {
          initial_states.update_state = 1;
          board_state.d = initial_states.out;
        }
        
        if (difficulty_button_detector.out)
        {
           diff_control.update_difficulty = 1;
          diff_control.update_move = 0;
        }
        
      game_state.GAME_OVER:
        //io_led[2][7] = 1; // For debugging game_state

        // if reset button pressed, get new initial board state and update board_state with this.
        if (reset_button_detector.out)
        {
          initial_states.update_state = 1;
          board_state.d = initial_states.out;
          game_state.d = game_state.IN_GAME;
        }
        
        if (difficulty_button_detector.out)
        {
           diff_control.update_difficulty = 1;
        }
        
        else
        {
           diff_control.update_difficulty = 0;
           diff_control.update_move = 0;
        }

        if(button_detector.out)
        {
          initial_states.update_state = 1;
          board_state.d = initial_states.out;
          game_state.d = game_state.IN_GAME; 
        } 
    }
    
    // Display current board state
    // Convert to external LED strip output
    // io_led[0][7:0] = board_state.q[7:0];
    // io_led[1][7:0] = board_state.q[15:8];
    //display.state = board_state.q;
    // display.mask = mask_mgr.out;
    //display_encoder.state = display.out;
    //led_strip = display_encoder.out;
    
    led_out.board_state = board_state.q;
    
    led_strip[0] = led_out.out0;
    led_strip[1] = led_out.out1;
    led_strip[2] = led_out.out2;
    led_strip[3] = led_out.out3;
  }
}