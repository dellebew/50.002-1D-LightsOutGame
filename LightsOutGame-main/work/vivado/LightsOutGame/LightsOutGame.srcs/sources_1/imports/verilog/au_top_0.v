/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    output reg usb_tx,
    output reg [3:0] led_strip,
    input [15:0] button
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_initial_states_out;
  reg [1-1:0] M_initial_states_update_state;
  initial_board_states_1 initial_states (
    .clk(clk),
    .rst(rst),
    .update_state(M_initial_states_update_state),
    .out(M_initial_states_out)
  );
  
  wire [4-1:0] M_display_out;
  reg [16-1:0] M_display_state;
  display_2 display (
    .clk(clk),
    .rst(rst),
    .state(M_display_state),
    .out(M_display_out)
  );
  
  reg [15:0] M_board_state_d, M_board_state_q = 16'h37ff;
  
  wire [16-1:0] M_alu_machine_out;
  wire [1-1:0] M_alu_machine_game_over;
  wire [48-1:0] M_alu_machine_led_data;
  reg [16-1:0] M_alu_machine_state;
  reg [16-1:0] M_alu_machine_button_pressed;
  alu_3 alu_machine (
    .state(M_alu_machine_state),
    .button_pressed(M_alu_machine_button_pressed),
    .out(M_alu_machine_out),
    .game_over(M_alu_machine_game_over),
    .led_data(M_alu_machine_led_data)
  );
  
  wire [(5'h10+0)-1:0] M_button_detector_out;
  reg [(5'h10+0)-1:0] M_button_detector_in;
  
  genvar GEN_button_detector0;
  generate
  for (GEN_button_detector0=0;GEN_button_detector0<5'h10;GEN_button_detector0=GEN_button_detector0+1) begin: button_detector_gen_0
    edge_detector_4 button_detector (
      .clk(clk),
      .in(M_button_detector_in[GEN_button_detector0*(1)+(1)-1-:(1)]),
      .out(M_button_detector_out[GEN_button_detector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(5'h10+0)-1:0] M_button_cond_out;
  reg [(5'h10+0)-1:0] M_button_cond_in;
  
  genvar GEN_button_cond0;
  generate
  for (GEN_button_cond0=0;GEN_button_cond0<5'h10;GEN_button_cond0=GEN_button_cond0+1) begin: button_cond_gen_0
    button_conditioner_5 button_cond (
      .clk(clk),
      .in(M_button_cond_in[GEN_button_cond0*(1)+(1)-1-:(1)]),
      .out(M_button_cond_out[GEN_button_cond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  
  localparam IN_GAME_game_state = 1'd0;
  localparam GAME_OVER_game_state = 1'd1;
  
  reg M_game_state_d, M_game_state_q = IN_GAME_game_state;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_game_state_d = M_game_state_q;
    M_board_state_d = M_board_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led_strip = 8'h00;
    M_button_cond_in = button;
    M_button_detector_in = M_button_cond_out;
    M_initial_states_update_state = 1'h0;
    
    case (M_game_state_q)
      IN_GAME_game_state: begin
        if (M_button_detector_out) begin
          M_alu_machine_button_pressed = M_button_detector_out;
          M_alu_machine_state = M_initial_states_out;
          M_board_state_d = M_alu_machine_out;
          if (M_alu_machine_game_over) begin
            M_game_state_d = GAME_OVER_game_state;
          end
        end else begin
          M_alu_machine_button_pressed = 16'h0000;
          M_alu_machine_state = M_board_state_q;
        end
      end
      GAME_OVER_game_state: begin
        if (M_button_detector_out) begin
          M_initial_states_update_state = 1'h1;
          M_board_state_d = M_initial_states_out;
          M_game_state_d = IN_GAME_game_state;
        end
      end
    endcase
    M_display_state = M_board_state_q;
    led_strip = M_display_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_board_state_q <= 16'h37ff;
    end else begin
      M_board_state_q <= M_board_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_state_q <= 1'h0;
    end else begin
      M_game_state_q <= M_game_state_d;
    end
  end
  
endmodule
